// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonalBlog.DataAccess.Concrete.EntityFramework.Contexts;

#nullable disable

namespace PersonalBlog.DataAccess.Migrations
{
    [DbContext(typeof(BlogContext))]
    partial class BlogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PersonalBlog.Entities.Concrete.AboutMe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CVUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("JobFA")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AboutMe", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1996, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CVUrl = "",
                            CreatedBy = "InitialCreated",
                            CreatedTime = new DateTime(2024, 3, 20, 13, 20, 18, 638, DateTimeKind.Local).AddTicks(5387),
                            FirstName = "İbrahim",
                            ImageUrl = "",
                            IsActive = false,
                            IsDelete = false,
                            Job = "Software Developer",
                            JobFA = "<i class=\"fa-solid fa-laptop-code\"></i>",
                            LastName = "Çınğı",
                            ModifiedBy = "InitialCreated",
                            ModifiedTime = new DateTime(2024, 3, 20, 13, 20, 18, 638, DateTimeKind.Local).AddTicks(5387)
                        });
                });

            modelBuilder.Entity("PersonalBlog.Entities.Concrete.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SecurityQuestion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SecurityQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Admin", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "InitialCreated",
                            CreatedTime = new DateTime(2024, 3, 20, 13, 20, 18, 638, DateTimeKind.Local).AddTicks(6774),
                            Email = "ibrahmcingi@gmail.com",
                            IsActive = false,
                            IsDelete = false,
                            ModifiedBy = "InitialCreated",
                            ModifiedTime = new DateTime(2024, 3, 20, 13, 20, 18, 638, DateTimeKind.Local).AddTicks(6775),
                            Password = "0a03d005fde3340906dc104434906a46",
                            SecurityQuestion = "Anne Kızlık Soyadı",
                            SecurityQuestionAnswer = "d10de61f3ecca60a812b7f13f820fe8d"
                        });
                });

            modelBuilder.Entity("PersonalBlog.Entities.Concrete.Complex.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SeoTags")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ShortContent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Article", (string)null);
                });

            modelBuilder.Entity("PersonalBlog.Entities.Concrete.Complex.Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryFA")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("PersonalBlog.Entities.Concrete.Complex.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("PersonalBlog.Entities.Concrete.ContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LongAdress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ShortAdress")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.HasKey("Id");

                    b.ToTable("ContactInfo", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "InitialCreated",
                            CreatedTime = new DateTime(2024, 3, 20, 13, 20, 18, 638, DateTimeKind.Local).AddTicks(9119),
                            Email = "ibrahmcingi@gmail.com",
                            IsActive = false,
                            IsDelete = false,
                            LongAdress = "Bağlaraltı Mah. Erikli Cad. A302. Sokak Erikli Evleri Kat:5 D:23",
                            ModifiedBy = "InitialCreated",
                            ModifiedTime = new DateTime(2024, 3, 20, 13, 20, 18, 638, DateTimeKind.Local).AddTicks(9120),
                            PhoneNumber = "+905319857784",
                            ShortAdress = "Yıldırım/BURSA"
                        });
                });

            modelBuilder.Entity("PersonalBlog.Entities.Concrete.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avarage")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Education", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Avarage = "2.59",
                            CreatedBy = "InitialCreated",
                            CreatedTime = new DateTime(2024, 3, 20, 13, 20, 18, 638, DateTimeKind.Local).AddTicks(8040),
                            Description = "1 sene ingilizce hazırlık olmak üzere %30 ingilizce mekatronik mühendisliği eğitimimi tamamladım.",
                            Duration = "2014-2021",
                            IsActive = false,
                            IsDelete = false,
                            ModifiedBy = "InitialCreated",
                            ModifiedTime = new DateTime(2024, 3, 20, 13, 20, 18, 638, DateTimeKind.Local).AddTicks(8041),
                            School = "Kocaeli Mekatronik Mühendisliği",
                            Title = "Lisans"
                        });
                });

            modelBuilder.Entity("PersonalBlog.Entities.Concrete.Experiences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Experiences", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "Altesa Mühendislik",
                            CreatedBy = "InitialCreated",
                            CreatedTime = new DateTime(2024, 3, 20, 13, 20, 18, 638, DateTimeKind.Local).AddTicks(1728),
                            Description = "CREO ile Makine kaynak montaj fikstürlerinin 3D modellerin hazırlanması, imalat için 2D teknik resimlerinin, montaj resimlerinin hazırlanması",
                            Duration = "06.2016/09.2016",
                            IsActive = false,
                            IsDelete = false,
                            ModifiedBy = "InitialCreated",
                            ModifiedTime = new DateTime(2024, 3, 20, 13, 20, 18, 638, DateTimeKind.Local).AddTicks(1729),
                            Title = "STAJ - ENDİSTÜRİYEL MAKİNE TASARIMI"
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "SANPARK SMART PARKING SYSTEM",
                            CreatedBy = "InitialCreated",
                            CreatedTime = new DateTime(2024, 3, 20, 13, 20, 18, 638, DateTimeKind.Local).AddTicks(1740),
                            Description = "Solidwork ile akıllı katlı otopark sistemlerinin AR-GE’si. 3D modellerinin yapılması, 2D teknik çizimlerinin  Hazırlanması. Iso 9001 -2018 Kapsamında şirketin kalite kontrol sisteminin kurulması, makinelerin bakım ve kontrollerinin planlanması.",
                            Duration = "07.2021/07.2022",
                            IsActive = false,
                            IsDelete = false,
                            ModifiedBy = "InitialCreated",
                            ModifiedTime = new DateTime(2024, 3, 20, 13, 20, 18, 638, DateTimeKind.Local).AddTicks(1741),
                            Title = "SANPARK - ENDİSTÜRİYEL MAKİNE TASARIMI"
                        },
                        new
                        {
                            Id = 3,
                            CompanyName = "NiceTry Games Studio",
                            CreatedBy = "InitialCreated",
                            CreatedTime = new DateTime(2024, 3, 20, 13, 20, 18, 638, DateTimeKind.Local).AddTicks(1746),
                            Description = "Unity ile sıfırdan oyun prototipleri hazırlama, c# diliyle yeniden kullanılabilir, temiz, SOLID prensiplerine uygun kodlarının hazırlanması. Level ve UI Tasarımlarının yapılması.",
                            Duration = "07.2022/03.2024",
                            IsActive = false,
                            IsDelete = false,
                            ModifiedBy = "InitialCreated",
                            ModifiedTime = new DateTime(2024, 3, 20, 13, 20, 18, 638, DateTimeKind.Local).AddTicks(1746),
                            Title = "NiceTry Games Studio - OYUN YAZILIMCISI"
                        });
                });

            modelBuilder.Entity("PersonalBlog.Entities.Concrete.Hobbies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Hobbies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "InitialCreated",
                            CreatedTime = new DateTime(2024, 3, 20, 13, 20, 18, 637, DateTimeKind.Local).AddTicks(7025),
                            IsActive = false,
                            IsDelete = false,
                            ModifiedBy = "InitialCreated",
                            ModifiedTime = new DateTime(2024, 3, 20, 13, 20, 18, 637, DateTimeKind.Local).AddTicks(7026),
                            Text = "Bilgisayar Donanımları, Bileşenleri ve Yazılımları"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "InitialCreated",
                            CreatedTime = new DateTime(2024, 3, 20, 13, 20, 18, 637, DateTimeKind.Local).AddTicks(7037),
                            IsActive = false,
                            IsDelete = false,
                            ModifiedBy = "InitialCreated",
                            ModifiedTime = new DateTime(2024, 3, 20, 13, 20, 18, 637, DateTimeKind.Local).AddTicks(7038),
                            Text = "Vizyon filmleri takip etmek ve izlemek, Film incelemelerini okumak"
                        });
                });

            modelBuilder.Entity("PersonalBlog.Entities.Concrete.HomePageSliders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortContent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("HomePageSliders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Unity ile sıfırdan oyun prototipleri hazırlama, c# diliyle yeniden kullanılabilir, temiz, SOLID prensiplerine uygun kodlarının hazırlanması. Level ve UI Tasarımlarının yapılması.",
                            CreatedBy = "InitialCreated",
                            CreatedTime = new DateTime(2024, 3, 20, 13, 20, 18, 637, DateTimeKind.Local).AddTicks(9522),
                            IsActive = false,
                            IsDelete = false,
                            ModifiedBy = "InitialCreated",
                            ModifiedTime = new DateTime(2024, 3, 20, 13, 20, 18, 637, DateTimeKind.Local).AddTicks(9523),
                            ShortContent = "Unity Oyun Motoru Ile Oyun Geliştirilmesi",
                            Title = "Unity Game Developer"
                        });
                });

            modelBuilder.Entity("PersonalBlog.Entities.Concrete.Messages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasKey("Id");

                    b.ToTable("Messages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "InitialCreated",
                            CreatedTime = new DateTime(2024, 3, 20, 13, 20, 18, 638, DateTimeKind.Local).AddTicks(2858),
                            Email = "test@gmail.com",
                            FirstName = "Hasan",
                            IsActive = false,
                            IsDelete = false,
                            LastName = "Erdal",
                            ModifiedBy = "InitialCreated",
                            ModifiedTime = new DateTime(2024, 3, 20, 13, 20, 18, 638, DateTimeKind.Local).AddTicks(2858),
                            Subject = "Test",
                            Text = "Test"
                        });
                });

            modelBuilder.Entity("PersonalBlog.Entities.Concrete.SiteIdentity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LogoFA")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LogoText")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SiteIdentity", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "InitialCreated",
                            CreatedTime = new DateTime(2024, 3, 20, 13, 20, 18, 638, DateTimeKind.Local).AddTicks(4113),
                            Description = "Ibrahim Çınğı Developer",
                            IsActive = false,
                            IsDelete = false,
                            Keywords = "C#, NET, WEB, SOFTWARE, .NET",
                            LogoFA = "<i class= \"fas fa-h-square\"></i>",
                            LogoText = "İbrahim Çınğı",
                            ModifiedBy = "InitialCreated",
                            ModifiedTime = new DateTime(2024, 3, 20, 13, 20, 18, 638, DateTimeKind.Local).AddTicks(4114),
                            Title = "İbrahim Çınğı"
                        });
                });

            modelBuilder.Entity("PersonalBlog.Entities.Concrete.Skills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PercentageValue")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Skills", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "InitialCreated",
                            CreatedTime = new DateTime(2024, 3, 20, 13, 20, 18, 638, DateTimeKind.Local).AddTicks(576),
                            IsActive = false,
                            IsDelete = false,
                            ModifiedBy = "InitialCreated",
                            ModifiedTime = new DateTime(2024, 3, 20, 13, 20, 18, 638, DateTimeKind.Local).AddTicks(577),
                            PercentageValue = 90,
                            Title = "C#"
                        });
                });

            modelBuilder.Entity("PersonalBlog.Entities.Concrete.SocialMediaAccounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("AccountFA")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AccountUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SocialMediaAccounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Account = "Linkedin",
                            AccountFA = "<i class=\"fa-brands fa-linkedin\"></i>",
                            AccountUrl = "https://www.linkedin.com/in/ibrahim-cingi/",
                            CreatedBy = "InitialCreated",
                            CreatedTime = new DateTime(2024, 3, 20, 13, 20, 18, 637, DateTimeKind.Local).AddTicks(8351),
                            IsActive = false,
                            IsDelete = false,
                            ModifiedBy = "InitialCreated",
                            ModifiedTime = new DateTime(2024, 3, 20, 13, 20, 18, 637, DateTimeKind.Local).AddTicks(8352)
                        },
                        new
                        {
                            Id = 2,
                            Account = "Instagram",
                            AccountFA = "<i class=\"fa-brands fa-instagram\"></i>",
                            AccountUrl = "https://www.instagram.com/ibrahimcngi",
                            CreatedBy = "InitialCreated",
                            CreatedTime = new DateTime(2024, 3, 20, 13, 20, 18, 637, DateTimeKind.Local).AddTicks(8365),
                            IsActive = false,
                            IsDelete = false,
                            ModifiedBy = "InitialCreated",
                            ModifiedTime = new DateTime(2024, 3, 20, 13, 20, 18, 637, DateTimeKind.Local).AddTicks(8366)
                        },
                        new
                        {
                            Id = 3,
                            Account = "Github",
                            AccountFA = "<i class=\"fa-brands fa-github\"></i>",
                            AccountUrl = "https://www.github.com/Roestee",
                            CreatedBy = "InitialCreated",
                            CreatedTime = new DateTime(2024, 3, 20, 13, 20, 18, 637, DateTimeKind.Local).AddTicks(8370),
                            IsActive = false,
                            IsDelete = false,
                            ModifiedBy = "InitialCreated",
                            ModifiedTime = new DateTime(2024, 3, 20, 13, 20, 18, 637, DateTimeKind.Local).AddTicks(8370)
                        });
                });

            modelBuilder.Entity("PersonalBlog.Entities.Concrete.Summary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Summary", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Content",
                            CreatedBy = "InitialCreated",
                            CreatedTime = new DateTime(2024, 3, 20, 13, 20, 18, 637, DateTimeKind.Local).AddTicks(5989),
                            IsActive = false,
                            IsDelete = false,
                            ModifiedBy = "InitialCreated",
                            ModifiedTime = new DateTime(2024, 3, 20, 13, 20, 18, 637, DateTimeKind.Local).AddTicks(5990)
                        });
                });

            modelBuilder.Entity("PersonalBlog.Entities.Concrete.Complex.Article", b =>
                {
                    b.HasOne("PersonalBlog.Entities.Concrete.Complex.Categories", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PersonalBlog.Entities.Concrete.Complex.Comment", b =>
                {
                    b.HasOne("PersonalBlog.Entities.Concrete.Complex.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("PersonalBlog.Entities.Concrete.Complex.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("PersonalBlog.Entities.Concrete.Complex.Categories", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
